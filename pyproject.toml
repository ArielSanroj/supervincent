# Configuración de herramientas de desarrollo para BetiBot
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "betibot"
version = "2.0.0"
description = "Sistema de procesamiento automático de facturas con integración Alegra"
authors = [
    {name = "BetiBot Team", email = "team@betibot.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "requests>=2.31.0",
    "pdfplumber>=0.9.0",
    "python-dotenv>=1.0.0",
    "watchdog>=3.0.0",
    "lxml>=4.9.0",
    "alegra-python>=1.0.0",
    "pytesseract>=0.3.10",
    "Pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "pydantic>=2.0.0",
    "celery>=5.3.0",
    "redis>=4.6.0",
    "prometheus-client>=0.17.0",
    "flower>=2.0.0",
    "kombu>=5.3.0",
    "billiard>=4.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "hypothesis>=6.82.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
]

[project.urls]
Homepage = "https://github.com/betibot/betibot"
Documentation = "https://betibot.readthedocs.io"
Repository = "https://github.com/betibot/betibot.git"
Issues = "https://github.com/betibot/betibot/issues"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | deprecated
  | examples
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["deprecated/*", "examples/*", "tests/*"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
follow_imports = "silent"
exclude = [
    "tests/",
    "deprecated/",
    "examples/",
    "venv/",
    ".venv/",
    "__pycache__/",
    ".pytest_cache/",
    ".coverage",
    "htmlcov/",
    ".mypy_cache/",
]
plugins = ["mypy.plugins.pydantic"]
show_error_codes = true
show_column_numbers = true
show_error_context = true
color_output = true
error_summary = true
pretty = true
cache_dir = ".mypy_cache"
sqlite_cache = true
strict = false
strict_optional = false
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Tests unitarios",
    "integration: Tests de integración",
    "e2e: Tests end-to-end",
    "slow: Tests lentos",
    "experimental: Tests de funcionalidades experimentales",
    "alegra: Tests que requieren conexión a Alegra",
    "dian: Tests que requieren conexión a DIAN",
    "nanobot: Tests que requieren conexión a Nanobot",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:requests.*",
]
timeout = 300
timeout_method = "thread"
usefixtures = ["mock_alegra", "mock_redis", "mock_tesseract"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/deprecated/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "deprecated", "examples"]
skips = ["B101", "B601"]

