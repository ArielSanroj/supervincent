# Docker Compose para producción
version: '3.8'

services:
  # Aplicación principal
  betibot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: betibot-app-prod
    environment:
      - PYTHONPATH=/app/src
      - ALEGRA_EMAIL=${ALEGRA_EMAIL}
      - ALEGRA_TOKEN=${ALEGRA_TOKEN}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./facturas:/app/facturas
      - ./reports:/app/reports
      - ./logs:/app/logs
      - ./.env:/app/.env
    ports:
      - "8000:8000"  # Métricas Prometheus
      - "8080:8080"  # Health check
    depends_on:
      - redis
      - celery
    networks:
      - betibot-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Celery worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: betibot-celery-prod
    command: celery -A src.tasks.celery_tasks worker --loglevel=info --concurrency=4
    environment:
      - PYTHONPATH=/app/src
      - ALEGRA_EMAIL=${ALEGRA_EMAIL}
      - ALEGRA_TOKEN=${ALEGRA_TOKEN}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./facturas:/app/facturas
      - ./reports:/app/reports
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      - redis
    networks:
      - betibot-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G

  # Celery beat (scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: betibot-celery-beat-prod
    command: celery -A src.tasks.celery_tasks beat --loglevel=info
    environment:
      - PYTHONPATH=/app/src
      - ALEGRA_EMAIL=${ALEGRA_EMAIL}
      - ALEGRA_TOKEN=${ALEGRA_TOKEN}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env
    depends_on:
      - redis
    networks:
      - betibot-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis para Celery y caché
  redis:
    image: redis:7-alpine
    container_name: betibot-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - betibot-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Flower para monitoreo de Celery
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: betibot-flower-prod
    command: celery -A src.tasks.celery_tasks flower --port=5555
    environment:
      - PYTHONPATH=/app/src
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - betibot-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: betibot-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - betibot-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: betibot-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SERVER_ROOT_URL=${GRAFANA_URL:-http://localhost:3000}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - betibot-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: betibot-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - betibot
      - flower
      - grafana
    networks:
      - betibot-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  betibot-network:
    driver: bridge

