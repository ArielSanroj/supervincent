# CI/CD Pipeline para BetiBot
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job de linting y formateo
  lint:
    name: Linting y Formateo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v5

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy isort bandit safety

      - name: Black formatter
        run: black --check --diff src/ tests/

      - name: Flake8 linter
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: MyPy type checker
        run: mypy src/ --ignore-missing-imports --no-strict-optional

      - name: Isort import sorter
        run: isort --check-only --diff src/ tests/

      - name: Bandit security linter
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Safety security check
        run: safety check --json --output safety-report.json

  # Job de tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    steps:
      - name: Checkout código
        uses: actions/checkout@v5

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Instalar dependencias del sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr tesseract-ocr-spa

      - name: Instalar dependencias de Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_performance.txt
          pip install pytest pytest-cov pytest-mock

      - name: Ejecutar tests unitarios
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Ejecutar tests de integración
        run: |
          pytest tests/integration/ -v

      - name: Ejecutar tests E2E
        run: |
          pytest tests/e2e/ -v

      - name: Subir cobertura a Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job de seguridad
  security:
    name: Análisis de Seguridad
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v5

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json

      - name: Safety vulnerability scan
        run: safety check --json --output safety-report.json

      - name: Subir reportes de seguridad
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Job de build de Docker
  docker-build:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    steps:
      - name: Checkout código
        uses: actions/checkout@v5

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login a Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build y push imagen
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/betibot:latest
            ${{ secrets.DOCKER_USERNAME }}/betibot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job de deployment
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout código
        uses: actions/checkout@v5

      - name: Deploy a staging
        run: |
          echo "Deploying to staging environment"
          # Aquí se implementaría el deployment real

      - name: Deploy a production
        run: |
          echo "Deploying to production environment"
          # Aquí se implementaría el deployment real

  # Job de notificaciones
  notify:
    name: Notificaciones
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: always()
    steps:
      - name: Notificar resultado
        run: |
          if [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ] && [ "${{ needs.docker-build.result }}" == "success" ]; then
            echo "✅ Todos los jobs pasaron exitosamente"
          else
            echo "❌ Algunos jobs fallaron"
          fi

